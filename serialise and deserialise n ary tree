class Codec:
    def serialize(self, root: 'Node') -> str:
        """Encodes a tree to a single string.
        
        :type root: Node
        :rtype: str
        """
        result = []
        def dfs(root):
            if root == None:
                return
            result.append(str(root.val))
            for child in root.children:
                dfs(child)
            result.append('x')
        dfs(root)
        res = ','.join(result)
        return res
	
    def deserialize(self, data: str) -> 'Node':
        """Decodes your encoded data to tree.
        
        :type data: str
        :rtype: Node
        """
        if not data:
            return None
        data = data.split(',')
        self.idx = 1
        root = Node(data[0])
        def dfs(root):
            if self.idx > len(data):
                return
            while data[self.idx] !='x':
                child = Node(data[self.idx])
                self.idx += 1
                dfs(child)
                root.children.append(child)
            # hit current index is 'x' move on
            self.idx += 1
            return root
        return dfs(root)

# Your Codec object will be instantiated and called as such:
# codec = Codec()
# codec.deserialize(codec.serialize(root))
