"""
# Definition for a Node.
class Node(object):
    def __init__(self, val=None, children=[]):
        self.val = val
        self.children = children
"""

class Codec:
    
    def serialize(self, root: 'Node') -> str:
        result = []
        
        def dfs(node):
            if not node:
                return
            result.append(str(node.val))
            for child in node.children:
                dfs(child)
            result.append("#")
        
        dfs(root)
        return ",".join(result)
    
    def deserialize(self, data: str) -> 'Node':
        if not data:
            return None
        
        data = data.split(",")
        self.idx = 0
        
        def dfs():
            if self.idx >= len(data) or data[self.idx] == "#":
                self.idx += 1
                return None
            
            node = Node(int(data[self.idx]))
            self.idx += 1
            while True:
                child = dfs()
                if child is None:
                    break
                node.children.append(child)
            return node
        
        return dfs()
   
