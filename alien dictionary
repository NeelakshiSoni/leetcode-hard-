 
        # build adj list
        adjacency_list = collections.defaultdict(list)
        in_degree = collections.defaultdict(int)
        
        for first_word, second_word in zip(words, words[1:]):
            index = 0
            for ch1, ch2 in zip(first_word, second_word):
                index += 1
                if ch1 != ch2:
                    adjacency_list[ch1].append(ch2)
                    in_degree[ch2] += 1
                    break # only first different character matters
                # when input is ["abc","ab"] this should return ""
                if index == min(len(first_word), len(second_word)) and len(first_word) > len(second_word):
                    return ""
        
        
        # check no of unique characters
        characters = set()
        for word in words:
            for ch in word:
                characters.add(ch)
        
        if len(characters) == 1:
            return characters.pop()
        
        # add characters with 0 in-degree to stack
        stack = []
        for ch in characters:
            if ch not in in_degree:
                stack.append(ch)
        
        # topological sort
        res = []
        while stack:
            node = stack.pop()
            res.append(node)
            
            for neighbor in adjacency_list[node]:
                if in_degree[neighbor] > 1:
                    in_degree[neighbor] -= 1
                elif in_degree[neighbor] == 1:
                    stack.append(neighbor)
                    
        return "".join(res) if len(res) == len(characters) else ""
        # if true: topological sort is possible and di-graph is acyclic
        # else: di-graph is cyclic
