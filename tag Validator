class Solution:
    def __init__(self) : 
        self.stack = [] 
        self.contains_tag = False 
        
    def is_valid_tag_name(self , s , ending) : 
        if len(s) < 1 or len(s) > 9 : 
            return False 
        for char in s: 
            if not char.isupper() : 
                return False 
            
        if ending : 
            if self.stack and self.stack[-1] == s : 
                self.stack.pop()
            else : 
                return False 
        else : 
            self.contains_tag = True 
            self.stack.append(s) 
        return True 
    
    def is_valid_data(self , s) : 
        return s.startswith("[CDATA[")
    def is_valid(self , code) : 
        if code[0] != "<" or code[-1] != ">" : 
            return False 
        i = 0 
        while i < len(code) : 
            ending = False 
            if not self.stack and self.contains_tag : 
                return False 
            if code[i] == "<" : 
                if i +1 < len(code) and code[i+1] == "!" : 
                    close_index = code.find("]]>" , i +1) 
                    if close_index < 0  or not self.is_valid_cdata(code[i+2 : close_index]) : 
                        return False 
                else : 
                    if i + 1 < len(code) and code[i+1] == "/" : 
                        i += 1 
                        ending = True 
                    close_index = code.find('>' , i +1) 
                    if close_index < 0 or not self.is_valid_tag_name(code[i+1 : close_index] , ending) : 
                        return False 
                i = close_index 
            i += 1 
        return not self.stack and self.contains_tag
                    
            
        
    
        
        
        
        
        
        
        
